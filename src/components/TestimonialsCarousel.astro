---
import { getBlurStyle } from "@utils/imageOptimization";
import { Image } from "astro:assets";

export interface ClientLogo {
  src: ImageMetadata;
  blurSrc: ImageMetadata;
  alt: string;
  companyName: string;
  testimonial: string;
  rating: number;
}

interface Props {
  cards: ClientLogo[];
}

const { cards: logos } = Astro.props;

// Duplicate for seamless loop
const duplicatedLogos = [...logos, ...logos];
---

<section class="z-1 bg-background relative overflow-hidden py-12 md:py-16 lg:pt-32 lg:pb-22">
  <div class="relative w-full min-h-81">

    <div class="flex gap-16 will-change-transform" data-carousel-track>
      {
        duplicatedLogos.map((logo, index) => {
          const blurStyle = getBlurStyle(logo.blurSrc.src);
          const isStaggered = index % 2 === 1;

          return (
            <div
              class:list={[
                "carousel-card",
                isStaggered && "translate-y-[6.6875rem]",
              ]}
            >
              <div
                class="relative flex h-full w-full flex-col rounded-[2.5rem] bg-[#19191914] p-6 shadow-[0px_4px_100px_10px_#2C2B2C63_inset,0px_4px_70px_0px_#E329B073] backdrop-blur-sm md:p-8"
              >

                <!-- style={blurStyle} -->
                {/* Logo & Rating */}
                <div class="mb-4 flex items-start justify-between gap-4">
                  <Image
                    class="h-12 w-auto object-contain md:h-16"
                    src={logo.src}
                    alt={logo.alt}
                    loading="lazy"
                  />

                  {/* Star Rating */}
                  <div class="flex shrink-0 gap-1">
                    {Array.from({ length: 5 }, (_, i) => (
                      <svg
                        class:list={[
                          "h-5 w-5 md:h-6 md:w-6",
                          i < logo.rating
                            ? "fill-[#FFA500] text-[#FFA500]"
                            : "fill-gray-300 text-gray-300",
                        ]}
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z" />
                      </svg>
                    ))}
                  </div>
                </div>

                {/* Testimonial */}
                <p class="text-sm leading-relaxed text-secondary md:text-base">
                  {logo.testimonial}
                </p>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";

  function initCarousel() {
    const track = document.querySelector(
      "[data-carousel-track]",
    ) as HTMLElement;
    if (!track) return;

    const cards = track.querySelectorAll(".carousel-card");
    const cardCount = cards.length / 2; // Original count (we duplicated)

    // Calculate total width of one set
    let totalWidth = 0;
    for (let i = 0; i < cardCount; i++) {
      const card = cards[i] as HTMLElement;
      totalWidth += card.offsetWidth + 24; // 24px = gap (1.5rem)
    }

    // Set initial position
    gsap.set(track, { x: 0 });

    // Create infinite animation
    const animation = gsap.to(track, {
      x: -totalWidth,
      duration: getAnimationDuration(),
      ease: "none",
      repeat: -1,
      modifiers: {
        x: (x) => {
          const progress = parseFloat(x) % totalWidth;
          return `${progress}px`;
        },
      },
    });

    // Pause on hover
    track.addEventListener("mouseenter", () => animation.pause());
    track.addEventListener("mouseleave", () => animation.resume());

    // Handle window resize
    let resizeTimeout: number;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        // Recalculate width
        totalWidth = 0;
        for (let i = 0; i < cardCount; i++) {
          const card = cards[i] as HTMLElement;
          totalWidth += card.offsetWidth + 24;
        }

        // Update animation
        animation.kill();
        initCarousel();
      }, 250);
    });
  }

  function getAnimationDuration(): number {
    const width = window.innerWidth;
    if (width < 768) return 30; // Mobile - faster
    if (width < 1024) return 40; // Tablet
    return 50; // Desktop - slower
  }

  // Initialize on load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initCarousel);
  } else {
    initCarousel();
  }

  // Reinitialize on navigation (for Astro view transitions)
  document.addEventListener("astro:page-load", initCarousel);
</script>

<style>

  .carousel-card {
    flex-shrink: 0;
    width: min(90vw, 39.75rem);
    height: 13.375rem;
  }

  @media (max-width: 767px) {
    .carousel-card {
      width: min(85vw, 39.75rem);
    }
  }
</style>
